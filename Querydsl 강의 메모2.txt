- 순수 JPA와 Querydsl

@Repository
public class MemberJpaRepository {

    private final EntityManager em;
    private final JPAQueryFactory jpaQueryFactory;

    public MemberJpaRepository(EntityManager em) {
        this.em = em;
        this.jpaQueryFactory = new JPAQueryFactory(em);
    }
}

순수 JPA를 통해 Querydsl을 사용하기 위해서는 위와 같이 Repository의 생성자에 EntityManager를 인자로 받고,
JPAQueryFactory의 생성자에 EntityManager를 인자로 입력해주어야 한다. 
생성자를 통해 EntityManager를 주입받고, 이를 사용하여 JPAQueryFactory를 초기화하기 위함이다.
그렇게 하면 아래와 같이 EntityManager와 Repository만 의존성 주입 해주면
JPAQueryFactory는 Repository를 통해서 사용할 수 있게 된다. 

@SpringBootTest
@Transactional
class MemberJpaRepositoryTest {

    @Autowired
    EntityManager em;

    @Autowired
    MemberJpaRepository repository;

    @Test
    public void basicTest() {
        Member member = new Member("member1", 10);
        repository.save(member);

        Member findMember = repository.findById(member.getId()).get();
        assertThat(findMember).isEqualTo(member);

        List<Member> result1 = repository.findAll();
        assertThat(result1).containsExactly(member);

        List<Member> result2 = repository.findByUsername("member1");
        assertThat(result2).containsExactly(member);
    }
}

아니면 main 메서드 클래스에 @Bean으로 등록을 할 수도 있다. 각자 편한 방식으로 주입하면 된다.

    @SpringBootApplication
    public class QuerydslApplication {

        public static void main(String[] args) {
            SpringApplication.run(QuerydslApplication.class, args);
        }

        @Bean
        JPAQueryFactory jpaQueryFactory(EntityManager em) {
            return new JPAQueryFactory(em);
        }
    }

    @Repository
    @RequiredArgsConstructor
    public class MemberJpaRepository {

        private final EntityManager em;
        private final JPAQueryFactory jpaQueryFactory;

    }



- Repository에서 동적 쿼리 사용하기: BooleanBuilder를 사용하는 경우
    @Data
    public class MemberTeamDto {
        private Long memberId;
        private String username;
        private int age;
        private Long teamId;
        private String teamName;
    
        @QueryProjection
        public MemberTeamDto(Long memberId, String username, int age, Long teamId, String teamName) {
            this.memberId = memberId;
            this.username = username;
            this.age = age;
            this.teamId = teamId;
            this.teamName = teamName;
        }
    }

    @Data
    public class MemberSearchCondition {
    
        // 회원명, 팀명, 나이(ageGoe, ageLoe)
        private String username;
        private String teamName;
    
        // 나이 데이터가 null 일 경우를 대비하여 Integer
        private Integer ageGoe;
        private Integer ageLoe;
    }

<Repository 코드>
    // 검색 조건: BooleanBuilder 사용 예시
    public List<MemberTeamDto> searchByBuilder(MemberSearchCondition condition) {

        BooleanBuilder builder = new BooleanBuilder();
        if (hasText(condition.getUsername())) {
            builder.and(member.username.eq(condition.getUsername()));
        }
        if (hasText(condition.getTeamName())) {
            builder.and(team.name.eq(condition.getTeamName()));
        }
        if (condition.getAgeGoe() != null) {
            builder.and(member.age.goe(condition.getAgeGoe()));
        }
        if (condition.getAgeLoe() != null) {
            builder.and(member.age.loe(condition.getAgeLoe()));
        }

        return jpaQueryFactory
                .select(new QMemberTeamDto(
                        member.id.as("memberId"),
                        member.username,
                        member.age,
                        team.id.as("teamId"),
                        team.name.as("teamName")
                ))
                .from(member)
                .leftJoin(member.team, team)
                .where(builder)
                .fetch();
    }

이 코드는 특정 검색 조건에 따라 Member와 Team 데이터를 조회하여 MemberTeamDto 객체 목록을 반환하는 메서드이다.
이 메서드는 BooleanBuilder를 사용하여 조건을 동적으로 생성하고, JPAQueryFactory를 사용하여 쿼리를 실행하는 기능을 제공한다.

* MemberSearchCondition을 매개변수로 받아서 조건에 맞는 MemberTeamDto 객체 리스트를 반환해준다.

* if () 부분들은 condition 객체의 각 필드가 존재하는지 확인하고, 존재할 경우 해당 조건을 BooleanBuilder에 추가로 빌드한다.

* eq(), goe(), loe() 등의 메서드는 모두 querydsl 라이브러리에서 제공하는 NumberExpression의 메서드이다.

* return 문에 작성된 querydsl 을 보면 조건을 설정하는 .where() 부분에 builder를 매개변수로 입력하는 모습을 볼 수 있다.
이렇게 함으로써 최종적으로 만들어진 BooleanBuilder가 DB에 전송될 쿼리 조건문에 반영된다.


이제 위에서 만들어진 searchByBuilder() 메서드를 테스트 해본다.
테스트를 위해 메서드에 입력할 MemberSearchCondition의 필드값들을 setter를 통해 설정함으로써
만들어진 condition을 searchByBuilder() 메서드에 입력하고, searchByBuilder()에서 반환된 값에 대해 assertThat으로 테스트한다.

    @Test
    public void searchTest() {
        MemberSearchCondition condition = new MemberSearchCondition();
        condition.setAgeGoe(35);
        condition.setAgeLoe(40);
        condition.setTeamName("teamB");

        List<MemberTeamDto> result = repository.searchByBuilder(condition);

        assertThat(result).extracting("username").containsExactly("member4");
    }

전송된 쿼리:
    select
        m1_0.member_id,
        m1_0.username,
        m1_0.age,
        m1_0.team_id,
        t1_0.name 
    from
        member m1_0 
    left join
        team t1_0 
            on t1_0.team_id=m1_0.team_id 
    where
        t1_0.name=? 
        and m1_0.age>=? 
        and m1_0.age<=?



- Repository에서 동적 쿼리 사용하기: where parameter 방식인 경우

    public List<MemberTeamDto> searchByWhereParam(MemberSearchCondition condition) {
        return jpaQueryFactory
                .select(new QMemberTeamDto(
                        member.id.as("memberId"),
                        member.username,
                        member.age,
                        team.id.as("teamId"),
                        team.name.as("teamName")
                ))
                .from(member)
                .leftJoin(member.team, team)
                .where(usernameEq(condition.getUsername()),
                        teamNameEq(condition.getTeamName()),
                        ageGoe(condition.getAgeGoe()),
                        ageLoe(condition.getAgeLoe()))
                .fetch();
    }

    private BooleanExpression usernameEq(String usernameCond) {
        return hasText(usernameCond) ? member.username.eq(usernameCond) : null;
    }

    private BooleanExpression teamNameEq(String teamNameCond) {
        return hasText(teamNameCond) ? team.name.eq(teamNameCond) : null;
    }

    private BooleanExpression ageGoe(Integer ageGoeCond) {
        return ageGoeCond != null ? member.age.goe(ageGoeCond) : null;
    }

    private BooleanExpression ageLoe(Integer ageLoeCond) {
        return ageLoeCond != null ? member.age.loe(ageLoeCond) : null;
    }

쿼리를 전송하는 메서드 자체는 굉장히 간결하게 잘 구성되어 있다.
오직 querydsl문만 return문으로 작성되어 있기 때문에 메서드가 굉장히 깔끔하다.
null 검증 메서드를 별도로 만들어야 하는 게 귀찮지만
성능상의 불이익을 가져다 주는 것도 아니고, 애플리케이션이 확장되면 재사용도 가능하므로 크게 문제 되지는 않는다.

테스트 코드는 위의 BooleanBuilder 테스트의 searchByBuilder() 메서드에서 searchByWhereParam() 메서드로만 바꾸면 되며,
테스트도 똑같이 통과하고 전송된 쿼리도 똑같다.



- 조회 API 컨트롤러 예제
main/resources/application.yml
spring:
  profiles:
    active: local
... 이하생략

test/resources/application.yml
spring:
  profiles:
    active: test
... 이하생략

이 설정은 'local' 프로파일을 활성화해준다. 'local' 프로파일이 활성화되면 @Profile("local") 애너테이션이 달린 빈이 활성화된다.
이렇게 하면 스프링 부트 애플리케이션을 실행할 때 다음과 같은 로그가 뜬다:

INFO 26452 --- [           main] study.querydsl.QuerydslApplication       : The following 1 profile is active: "local"

@Profile("local")
@Component
@RequiredArgsConstructor
public class InitMember {

    private final InitMemberService initMemberService;

    @PostConstruct
    public void init() {
        initMemberService.init();
    }

    @Component
    static class InitMemberService {
        @PersistenceContext
        private EntityManager em;

        @Transactional
        public void init() {
            Team teamA = new Team("teamA");
            em.persist(teamA);
            Team teamB = new Team("teamB");
            em.persist(teamB);

            for (int i = 0; i < 100; i++) {
                Team selectedTeam = i % 2 != 0 ? teamA : teamB;
                em.persist(new Member("member"+i, i, selectedTeam));
            }
        }
    }
}

* 테스트 클래스에는 @Profile("local")가 달린 InitMember와 별개로 적용되기 때문에 테스트를 실행해도 위의 Member와 Team 데이터가 로딩되지 않는다. 이렇게 함으로써 테스트할 때는 InitMember로 만든 데이터를 건드리지 않게 하는 것이다.

* @Component를 달아줌으로써 이 클래스를 스프링 빈으로 등록하고 있다.

* @PostConstruct 애너테이션이 붙은 init() 메서드는 빈이 초기화된 후 실행된다.
  이때, init() 메서드는 InitMemberService의 init() 메서드를 호출하고 있다.

* InitMemberService 클래스는 스프링 부트 애플리케이션에서 특정 프로파일이 활성화될 때 초기 데이터를 설정하는 
  내부 @Component 클래스로 정의되어 있다. 이 클래스는 EntityManager를 사용하여 DB 작업을 수행하며, 
  초기화 메서드는 @Transactional 애너테이션을 통해 트랜잭션 내에서 실행된다.

* InitMemberService 클래스가 InitMember 클래스 내부에 static 클래스로 정의되어 있는데,
  이러한 방식은 외부 클래스인 InitMember의 인스턴스가 없어도 InitMemberService를 인스턴스로 생성할 수 있게 해준다.

* @PersistenceContext private EntityManager em; 부분은 JPA의 EntityManager를 스프링 컨테이너로부터 주입 받기 위한 것이다.

* InitMemberService의 init() 메서드는 두 개의 팀과 100명의 멤버를 생성하여 DB에 저장한다.


이를 바탕으로 조회 API를 만들어 본다:
    @GetMapping("/v1/members")
    public List<MemberTeamDto> searchMemberV1(MemberSearchCondition condition) {
        return memberJpaRepository.searchByWhereParam(condition);
    }

* localhost:8080/v1/members 요청을 해보면 홀수인 멤버는 teamA이고, 짝수인 멤버는 teamB인 100명의 멤버들이 나온다.

* 여기서 검색조건을 넣어서 조회해보면 localhost:8080/v1/members?teamName=teamB
member2, member4, ... member98, member100 조회

* 팀 소속과 나이 조건을 동시에 걸 수도 있다. localhost:8080/v1/members?teamName=teamB&ageGoe=18&ageLoe=65
member18, member20, ..., member 62, member64까지 조회

이렇게 querydsl을 이용하면 condition으로 걸어놨던 것들을 query string으로 동적으로 조회할 수 있다.



- SpringDataJPA에서 Querydsl 활용하기: 사용자 정의 리포지토리 만들기
    1) 사용자 정의 인터페이스 작성
    2) 사용자 정의 인터페이스 구현
    3) Spring Data JPA 를 상속 받는 리포지토리 인터페이스에 2)에서 만든 사용자 정의 인터페이스 상속하기

이렇게 하는 이유는 상세한 코드를 인터페이스에 입력할 수는 없기 때문이다.
상세한 내용은 이곳의 커밋 내역을 시간흐름 순으로 확인할 것:
https://github.com/wjcho0303/Querydsl/tree/practice-SpringDataJPA

과정 3)까지의 결과를 요약하면 다음과 같다:
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
1) 사용자 정의 인터페이스 작성

public interface MemberRepositoryCustom {

    List<MemberTeamDto> searchByWhereParam(MemberSearchCondition condition);
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
2) 사용자 정의 인터페이스 구현

@RequiredArgsConstructor
public class MemberRepositoryCustomImpl implements MemberRepositoryCustom {

    private final JPAQueryFactory jpaQueryFactory;

    @Override
    public List<MemberTeamDto> searchByWhereParam(MemberSearchCondition condition) {
        return jpaQueryFactory
                ... 이하 생략 ...
    }

    ... null 체크 메서드들 이하 생략 ...
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
3) Spring Data JPA 를 상속 받는 리포지토리 인터페이스에 2)에서 만든 사용자 정의 인터페이스 상속하기

public interface MemberRepository extends JpaRepository<Member, Long>, MemberRepositoryCustom {

    // select m from Member m where m.username = ?
    List<Member> findByUsername(String username);

}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
4) 3)에서 완성된 Spring Data JPA 인터페이스 테스트하기

@SpringBootTest
@Transactional
class MemberRepositoryTest {

    @Autowired
    EntityManager em;

    @Autowired
    MemberRepository memberRepository;

    ... before(), basicTest(), searchByWhereParamTest() 상세 내용은 이전 테스트와 동일함
}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

- Spring Data JPA와 페이징
    * Spring Data JPA에서 제공하는 Page와 Pageable을 활용한다.
    * 전체 카운트를 한 번에 조회하는 것도 가능하고, 데이터 내용과 전체 카운트를 별도로 조회하는 것도 가능하다.

count 쿼리는 필터 조건에 맞는 데이터의 개수를 세기 위해 전체 테이블을 스캔하기 때문에 인덱스가 적절히 설정되지 않은 경우, 테이블의 모든 행을 검색하여 조건에 맞는 행의 개수를 계산한다. 그렇기 때문에 필요한 경우가 아니라면 count 쿼리를 의미 없이 날리는 것은 좋지 않다.

마찬가지로 이 기능에 필요한 메서드를 추가하기 위해선 MemberRepositoryCustom 인터페이스, MemberRepositoryCustomImpl 클래스에 메서드를 추가해줘야 한다.

* 먼저, 전체 카운트를 한 번에 조회하는 메서드는 다음과 같다:
QueryResults 및 fetchResult()를 사용하기 때문에 count 쿼리도 원든 원치 않든 함께 전송된다.

    @Override
    public Page<MemberTeamDto> searchPageSimple(MemberSearchCondition condition, Pageable pageable) {
        QueryResults<MemberTeamDto> result = jpaQueryFactory
                .select(new QMemberTeamDto(
                        member.id.as("memberId"),
                        member.username,
                        member.age,
                        team.id.as("teamId"),
                        team.name.as("teamName")
                ))
                .from(member)
                .leftJoin(member.team, team)
                .where(usernameEq(condition.getUsername()),
                        teamNameEq(condition.getTeamName()),
                        ageGoe(condition.getAgeGoe()),
                        ageLoe(condition.getAgeLoe()))
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetchResults();

        List<MemberTeamDto> content = result.getResults();
        long total = result.getTotal();

        return new PageImpl<>(content, pageable, total);
    }


* 데이터 내용과 전체 카운트를 별도로 조회하는 것은 다음과 같다:

    @Override
    public Page<MemberTeamDto> searchPageComplex(MemberSearchCondition condition, Pageable pageable) {
        List<MemberTeamDto> content = jpaQueryFactory
                .select(new QMemberTeamDto(
                        member.id.as("memberId"),
                        member.username,
                        member.age,
                        team.id.as("teamId"),
                        team.name.as("teamName")
                ))
                .from(member)
                .leftJoin(member.team, team)
                .where(usernameEq(condition.getUsername()),
                        teamNameEq(condition.getTeamName()),
                        ageGoe(condition.getAgeGoe()),
                        ageLoe(condition.getAgeLoe()))
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();

        long total = jpaQueryFactory
                .select(member)
                .from(member)
                .leftJoin(member.team, team)
                .where(usernameEq(condition.getUsername()),
                        teamNameEq(condition.getTeamName()),
                        ageGoe(condition.getAgeGoe()),
                        ageLoe(condition.getAgeLoe()))
                .fetchCount();

        return new PageImpl<>(content, pageable, total);
    }

이 두 번째 방식은 컨텐츠 쿼리와 토탈 카운트를 나타내는 쿼리를 분리해놓은 것이다.
fetch()로 List 타입의 조회 쿼리를 날리기 때문에 select 문만 나가며, 별도로 total count가 필요하다면 아래와 같이 fetchCount()를 사용하면 된다.
이런 식으로 쿼리를 분리해놓으면 더 나아가서 total 값이 0일 때 쿼리를 날리지 않도록
조건문을 통해 분기 처리를 함으로써 리소스를 아끼는 코드도 작성할 수 있게 된다.



- 위에서 작성된 searchPageComplex() 메서드를 기반으로 count 쿼리를 최적화하고 API로 테스트 해보기
* count 쿼리를 생략하고 싶을 때
    @Override
    public Page<MemberTeamDto> searchPageComplex(MemberSearchCondition condition, Pageable pageable) {
        List<MemberTeamDto> content = jpaQueryFactory
                .select(new QMemberTeamDto(
                        member.id.as("memberId"),
                        member.username,
                        member.age,
                        team.id.as("teamId"),
                        team.name.as("teamName")
                ))
                .from(member)
                .leftJoin(member.team, team)
                .where(usernameEq(condition.getUsername()),
                        teamNameEq(condition.getTeamName()),
                        ageGoe(condition.getAgeGoe()),
                        ageLoe(condition.getAgeLoe()))
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();

        JPAQuery<Member> countQuery = jpaQueryFactory
                .select(member)
                .from(member)
                .leftJoin(member.team, team)
                .where(usernameEq(condition.getUsername()),
                        teamNameEq(condition.getTeamName()),
                        ageGoe(condition.getAgeGoe()),
                        ageLoe(condition.getAgeLoe()));

//        return new PageImpl<>(content, pageable, total);
        return PageableExecutionUtils.getPage(content, pageable, () -> countQuery.fetchCount());
    }

PageableExecutionUtils.getPage() 메서드의 인자를 위와 같이 입력해주면 다음과 같은 일이 벌어진다:
1) content의 사이즈가 페이지의 limit() 보다 작을 때
content의 사이즈가 pageable.getPageSize()보다 작으면, 더 이상 다음 페이지가 없다는 것을 의미한다.
따라서 전체 데이터 개수를 알기 위해 굳이 totalSupplier를 호출해서 카운트 쿼리를 실행할 필요가 없다.
그렇기 때문에 세 번째 인자인 함수 부분(totlaSupplier)이 호출되지 않고 count 쿼리를 실행하지 않는다.

2) content가 마지막 페이지일 때
content.size() < pageable.getPageSize() 조건을 만족하면 count 쿼리 생략
content.size() == pageable.getPageSize() 조건을 만족하면 더 많은 데이터가 있는지 확인할 필요가 있으므로 count를 실행한다.


이제 API 호출을 직접 해보도록 하자:

    @GetMapping("/v2/members")
    public Page<MemberTeamDto> searchMemberV2(MemberSearchCondition condition, Pageable pageable) {
        return memberRepository.searchPageSimple(condition, pageable);
    }

    @GetMapping("/v3/members")
    public Page<MemberTeamDto> searchMemberV3(MemberSearchCondition condition, Pageable pageable) {
        return memberRepository.searchPageComplex(condition, pageable);
    }

* searchPageSimple() 메서드
    localhost:8080/v2/members 조회 해보면 기본적으로 pageSize를 20으로 하여 조회된다.
    localhost:8080/v2/members?page=0&size=10 이런 식으로 요청하면 그에 맞게 조회된다.

* searchPageComplex() 메서드
    localhost:8080/v3/members?size=1~100 까지는 요청하면 count 쿼리도 함께 나가지만,
    localhost:8080/v3/members?size=101 부터는 요청하면 데이터가 100개밖에 없기 때문에
    count 쿼리가 나가지 않는다. 이러한 것들은 모두 요청할 때마다 애플리케이션 로그를 통해 직접 확인 가능하다.



- querydsl과 정렬
Spring Data JPA는 자신의 정렬을 Querydsl의 정렬로 편리하게 변경하는 기능을 제공한다.
관련 객체는 OrderSpecifier이다. 단, 단순히 하나의 엔티티에 대한 정렬을 가능하지만 join을 하게 되면 안 된다.
조건이 조금만 복잡해져도 Pageable의 Sort 기능을 사용하기 어렵다는 것이다.
그렇기 때문에 정렬을 사용하고 싶다면 그때그때 파라미터를 받아서 정렬 처리하도록 한다:



- Spring Data JPA에서 제공하는 Querydsl 기능
결론부터 말하자면, 이 기능은 사용에 제약이 많아 복잡한 실무 환경에서는 사용하기에는 부적합하다.
특히 join을 하게 되면 잘 작동하지 않는다... 그러므로 별로 쓸 일은 없다.
사용법은 강의 내용을 따로 참고하자.
https://www.inflearn.com/course/lecture?courseSlug=querydsl-%EC%8B%A4%EC%A0%84&unitId=30156&tab=curriculum



- 스프링 부트 3.x 이상에서 변경된 점
예제에서 사용한 fetchResults()와 fetchCount()는 원치 않는 count 쿼리를 전송하는 특징으로 인해 Deprecated 될 예정이다.
그렇기 때문에 Querydsl에서는 이제 이 두 메서드는 지원하지 않을 예정이다.
그러므로 count 쿼리는 별도의 querydsl로 작성해야 하며, fetch() 또는 fetchOne()으로 마무리시키면 된다.

예시)
    Long totalCount = queryFactory
//    .select(Wildcard.count)  // select count(*)를 의미함
        .select(member.count())  // select count(member.id)를 의미함
        .from(member)
        .fetchOne();


위에서 작성했던 예제 코드도 변경한다:

Before)
JPAQuery<Member> countQuery = jpaQueryFactory
                .select(member)
                .from(member)
                .leftJoin(member.team, team)
                .where(usernameEq(condition.getUsername()),
                        teamNameEq(condition.getTeamName()),
                        ageGoe(condition.getAgeGoe()),
                        ageLoe(condition.getAgeLoe()));

//        return new PageImpl<>(content, pageable, total);
        return PageableExecutionUtils.getPage(content, pageable, countQuery::fetchCount);

After)
JPAQuery<Long> countQuery = jpaQueryFactory       ---> Long 타입으로 변경
                .select(member.count())
                .from(member)
                .leftJoin(member.team, team)
                .where(usernameEq(condition.getUsername()),
                        teamNameEq(condition.getTeamName()),
                        ageGoe(condition.getAgeGoe()),
                        ageLoe(condition.getAgeLoe()));

//        return new PageImpl<>(content, pageable, total);
        return PageableExecutionUtils.getPage(content, pageable, countQuery::fetchOne);  ---> fetchOne으로 변경


